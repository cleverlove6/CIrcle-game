import socket
import re
import multiprocessing


def service_client(new_socket):
    """为这个客户端返回数据"""
    # 1. 接受浏览器发送过来的请求，就是http的请求
    # 2. get / http 1.1
    # 。。。。。
    request = new_socket.recv(1024).decode("utf-8")
    # print(">>>>"* 20)
    # pring(request)
    request_lines = request.splitlines()
    print("")
    print(">"*20)
    print(request_lines)

    # Get / index.html http/1.1
    # get post put del
    file_name = ""
    ret = re.match(r"[^/]+(/[^ ]*)",request_lines[0])
    if ret:
        file_name = ret.group(1)
        # print("*"*50,file_name)
        if file_name == "/":
            file_name = "/index.html"


    # 2.返回http格式的数据，给浏览器

    try:
        f = open("./html" + file_name,"rb")
    except:
        response = "HTTP/1.1 404 NOT FOUND\r\n"
        response += "\r\n"
        response += "------------file not found----------------"
        new_socket.send(response.encode("utf-8"))
    else:
        html_content = f.read()

        f.close()
        # 2.1 准备发送给浏览器的数据 header
        response = "HTTP/1.1 200 OK\r\n"
        response += "\r\n"
        # 2.2 准备发送给浏览器的数据 body
        # response += "sfjlajsdlfkjalsd"
        # 将 response header 发送给浏览器
        new_socket.send(response.encode("utf-8"))
        new_socket.send(html_content)

    new_socket.close()

def main():
    # 用来整体控制
    # 1. 创建套接字
    tcp_server_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    tcp_server_socket.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)

    # 2.绑定
    tcp_server_socket.bind(("",7070))

    # 3. 便监听套接字
    tcp_server_socket.listen(128)

    while True:
        # 4.等待新客户端的链接
        new_socket,client_addr = tcp_server_socket.accept()

        # 5.为这个客户端服务
        p = multiprocessing.Process(target=service_client,args=(new_socket,))
        p.start()

        new_socket.close()

    tcp_server_socket.close()


if __name__ == '__main__':
    main()
    
----------------------------------------------------------------------------------------------------------------
# 面向对象

import socket
import re
import multiprocessing


class WSGIServer(object):

    def __init__(self):

        # tcp_server_socket 是局部变量
        # 1. 创建套接字
        self.tcp_server_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        self.tcp_server_socket.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)

        # 2.绑定
        self.tcp_server_socket.bind(("",7070))

        # 3. 便监听套接字
        self.tcp_server_socket.listen(128)

    def service_client(self,new_socket):
        """为这个客户端返回数据"""
        # 1. 接受浏览器发送过来的请求，就是http的请求
        # 2. get / http 1.1
        # 。。。。。
        request = new_socket.recv(1024).decode("utf-8")
        # print(">>>>"* 20)
        # pring(request)
        request_lines = request.splitlines()
        print("")
        print(">"*20)
        print(request_lines)

        # Get / index.html http/1.1
        # get post put del
        file_name = ""
        ret = re.match(r"[^/]+(/[^ ]*)",request_lines[0])
        if ret:
            file_name = ret.group(1)
            # print("*"*50,file_name)
            if file_name == "/":
                file_name = "/index.html"


        # 2.返回http格式的数据，给浏览器

        try:
            f = open("./html" + file_name,"rb")
        except:
            response = "HTTP/1.1 404 NOT FOUND\r\n"
            response += "\r\n"
            response += "------------file not found----------------"
            new_socket.send(response.encode("utf-8"))
        else:
            html_content = f.read()

            f.close()
            # 2.1 准备发送给浏览器的数据 header
            response = "HTTP/1.1 200 OK\r\n"
            response += "\r\n"
            # 2.2 准备发送给浏览器的数据 body
            # response += "sfjlajsdlfkjalsd"
            # 将 response header 发送给浏览器
            new_socket.send(response.encode("utf-8"))
            new_socket.send(html_content)

        new_socket.close()

    def run_forever(self):
        # 用来整体控制

        while True:
            # 4.等待新客户端的链接
            new_socket,client_addr = self.tcp_server_socket.accept()

            # 5.为这个客户端服务
            p = multiprocessing.Process(target=self.service_client,args=(new_socket,))
            p.start()

            new_socket.close()

        self.tcp_server_socket.close()

def main():
    """控制整体，创建一个web服务器对象，然后调用，这个对象的run_forever方法"""
    wsgi_server = WSGIServer()
    wsgi_server.run_forever()



if __name__ == '__main__':
    main()
